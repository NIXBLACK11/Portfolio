{"ast":null,"code":"import _slicedToArray from \"C:/Users/siddh/Desktop/programms/react/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/siddh/Desktop/programms/react/portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/siddh/Desktop/programms/react/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/siddh/Desktop/programms/react/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nvar fixOutMode = function fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n  _createClass(Particle, [{\n    key: \"destroy\",\n    value: function destroy(override) {\n      if (this.unbreakable || this.destroyed) {\n        return;\n      }\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.slow.inRange = false;\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            plugin = _step$value[1];\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n          if (updater.particleDestroyed) {\n            updater.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            plugin = _step3$value[1];\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a, _b;\n      var color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n      if (color && this.roll && (this.backColor || this.roll.alter)) {\n        var backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n          backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n          rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          }\n          if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n          }\n        }\n      }\n      return color;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"init\",\n    value: function init(id, position, overrideOptions, group) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      var container = this.container,\n        engine = this._engine;\n      this.id = id;\n      this.group = group;\n      this.fill = true;\n      this.pathRotation = false;\n      this.close = true;\n      this.lastPathTime = 0;\n      this.destroyed = false;\n      this.unbreakable = false;\n      this.rotation = 0;\n      this.misplaced = false;\n      this.retina = {\n        maxDistance: {}\n      };\n      this.outType = \"normal\";\n      this.ignoresResizeRatio = true;\n      var pxRatio = container.retina.pixelRatio,\n        mainOptions = container.actualOptions,\n        particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n        shapeType = particlesOptions.shape.type,\n        reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n      var shapeOptions = particlesOptions.shape;\n      if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type,\n          shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n      this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      particlesOptions.load(overrideOptions);\n      particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n      this.interactivity = new Interactivity(engine, container);\n      this.interactivity.load(container.actualOptions.interactivity);\n      this.interactivity.load(particlesOptions.interactivity);\n      this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n      this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n      this.options = particlesOptions;\n      var pathOptions = this.options.move.path;\n      this.pathDelay = getValue(pathOptions.delay) * 1000;\n      if (pathOptions.generator) {\n        this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n        if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n          this.pathGenerator.init(container);\n        }\n      }\n      var zIndexValue = getRangeValue(this.options.zIndex.value);\n      container.retina.initParticle(this);\n      var sizeOptions = this.options.size,\n        sizeRange = sizeOptions.value,\n        sizeAnimation = sizeOptions.animation;\n      this.size = {\n        enable: sizeOptions.animation.enable,\n        value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n        max: getRangeMax(sizeRange) * pxRatio,\n        min: getRangeMin(sizeRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(sizeOptions.animation.count)\n      };\n      if (sizeAnimation.enable) {\n        this.size.status = 0;\n        this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n        switch (sizeAnimation.startValue) {\n          case \"min\":\n            this.size.value = this.size.min;\n            this.size.status = 0;\n            break;\n          case \"random\":\n            this.size.value = randomInRange(this.size) * pxRatio;\n            this.size.status = getRandom() >= 0.5 ? 0 : 1;\n            break;\n          case \"max\":\n          default:\n            this.size.value = this.size.max;\n            this.size.status = 1;\n            break;\n        }\n      }\n      this.bubble = {\n        inRange: false\n      };\n      this.slow = {\n        inRange: false,\n        factor: 1\n      };\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      var canvasSize = container.canvas.size,\n        moveCenter = Object.assign({}, this.options.move.center),\n        isCenterPercent = moveCenter.mode === \"percent\";\n      this.moveCenter = {\n        x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n        y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n        radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n        mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n      this.initialVelocity = this._calculateVelocity();\n      this.velocity = this.initialVelocity.copy();\n      this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n      this.offset = Vector.origin;\n      var particles = container.particles;\n      particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n      particles.lastZIndex = this.position.z;\n      this.zIndexFactor = this.position.z / container.zLayers;\n      this.sides = 24;\n      var drawer = container.drawers.get(this.shape);\n      if (!drawer) {\n        drawer = this._engine.plugins.getShapeDrawer(this.shape);\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n        drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n      }\n      var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n      this.spawning = false;\n      this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n      var _iterator4 = _createForOfIteratorHelper(container.particles.updaters),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          updater.init(this);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(container.particles.movers),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var mover = _step5.value;\n          (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n        drawer.particleInit(container, this);\n      }\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n            plugin = _step6$value[1];\n          (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n        canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _a;\n      var _iterator7 = _createForOfIteratorHelper(this.container.particles.updaters),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var updater = _step7.value;\n          (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_calcPosition\",\n    value: function _calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var _a, _b, _c, _d;\n      var _iterator8 = _createForOfIteratorHelper(container.plugins),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n            plugin = _step8$value[1];\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      var canvasSize = container.canvas.size,\n        exactPosition = calcExactPositionOrRandomFromSize({\n          size: canvasSize,\n          position: position\n        }),\n        pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n        radius = this.getRadius(),\n        outModes = this.options.move.outModes,\n        fixHorizontal = function fixHorizontal(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-horizontal\"],\n            coord: pos.x,\n            maxCoord: container.canvas.size.width,\n            setCb: function setCb(value) {\n              return pos.x += value;\n            },\n            radius: radius\n          });\n        },\n        fixVertical = function fixVertical(outMode) {\n          fixOutMode({\n            outMode: outMode,\n            checkModes: [\"bounce\", \"bounce-vertical\"],\n            coord: pos.y,\n            maxCoord: container.canvas.size.height,\n            setCb: function setCb(value) {\n              return pos.y += value;\n            },\n            radius: radius\n          });\n        };\n      fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n      fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n      fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n      fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n      if (this._checkOverlap(pos, tryCount)) {\n        return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n      return pos;\n    }\n  }, {\n    key: \"_calculateVelocity\",\n    value: function _calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction);\n      var res = baseVelocity.copy();\n      var moveOptions = this.options.move;\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n        radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n        range = {\n          left: radOffset - rad / 2,\n          right: radOffset + rad / 2\n        };\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n      return res;\n    }\n  }, {\n    key: \"_checkOverlap\",\n    value: function _checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions,\n        radius = this.getRadius();\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n      var overlapOptions = collisionsOptions.overlap;\n      if (overlapOptions.enable) {\n        return false;\n      }\n      var retries = overlapOptions.retries;\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n      var overlaps = false;\n      var _iterator9 = _createForOfIteratorHelper(this.container.particles.array),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return overlaps;\n    }\n  }, {\n    key: \"_loadShapeData\",\n    value: function _loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n      if (shapeData) {\n        return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n      }\n    }\n  }]);\n  return Particle;\n}();","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_engine","init","override","unbreakable","destroyed","bubble","inRange","slow","plugins","plugin","particleDestroyed","particles","updaters","updater","delta","canvas","drawParticlePlugin","drawParticle","_a","_b","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","angle","type","value","getRadius","x","offset","y","z","size","strokeColor","getFillColor","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","pathGenerator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","movers","mover","call","particleInit","particleCreated","isInsideCanvas","reset","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle"],"sources":["C:/Users/siddh/Desktop/programms/react/portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = getRandom() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}